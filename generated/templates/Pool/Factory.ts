// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCuratePool extends ethereum.Event {
  get params(): AddCuratePool__Params {
    return new AddCuratePool__Params(this);
  }
}

export class AddCuratePool__Params {
  _event: AddCuratePool;

  constructor(event: AddCuratePool) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Curated(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class CreatePool extends ethereum.Event {
  get params(): CreatePool__Params {
    return new CreatePool__Params(this);
  }
}

export class CreatePool__Params {
  _event: CreatePool;

  constructor(event: CreatePool) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveCuratePool extends ethereum.Event {
  get params(): RemoveCuratePool__Params {
    return new RemoveCuratePool__Params(this);
  }
}

export class RemoveCuratePool__Params {
  _event: RemoveCuratePool;

  constructor(event: RemoveCuratePool) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Curated(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  BASE(): Address {
    let result = super.call("BASE", "BASE():(address)", []);

    return result[0].toAddress();
  }

  try_BASE(): ethereum.CallResult<Address> {
    let result = super.tryCall("BASE", "BASE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEPLOYER(): Address {
    let result = super.call("DEPLOYER", "DEPLOYER():(address)", []);

    return result[0].toAddress();
  }

  try_DEPLOYER(): ethereum.CallResult<Address> {
    let result = super.tryCall("DEPLOYER", "DEPLOYER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WBNB(): Address {
    let result = super.call("WBNB", "WBNB():(address)", []);

    return result[0].toAddress();
  }

  try_WBNB(): ethereum.CallResult<Address> {
    let result = super.tryCall("WBNB", "WBNB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  arrayPools(param0: BigInt): Address {
    let result = super.call("arrayPools", "arrayPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_arrayPools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("arrayPools", "arrayPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  arrayTokens(param0: BigInt): Address {
    let result = super.call("arrayTokens", "arrayTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_arrayTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "arrayTokens",
      "arrayTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createPool(token: Address): Address {
    let result = super.call("createPool", "createPool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_createPool(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("createPool", "createPool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createPoolADD(
    inputBase: BigInt,
    inputToken: BigInt,
    token: Address
  ): Address {
    let result = super.call(
      "createPoolADD",
      "createPoolADD(uint256,uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(inputBase),
        ethereum.Value.fromUnsignedBigInt(inputToken),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toAddress();
  }

  try_createPoolADD(
    inputBase: BigInt,
    inputToken: BigInt,
    token: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPoolADD",
      "createPoolADD(uint256,uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(inputBase),
        ethereum.Value.fromUnsignedBigInt(inputToken),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curatedPoolSize(): BigInt {
    let result = super.call(
      "curatedPoolSize",
      "curatedPoolSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_curatedPoolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "curatedPoolSize",
      "curatedPoolSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(token: Address): Address {
    let result = super.call("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_getPool(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolArray(i: BigInt): Address {
    let result = super.call("getPoolArray", "getPoolArray(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);

    return result[0].toAddress();
  }

  try_getPoolArray(i: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolArray",
      "getPoolArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(i)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getToken(i: BigInt): Address {
    let result = super.call("getToken", "getToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);

    return result[0].toAddress();
  }

  try_getToken(i: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isCuratedPool(param0: Address): boolean {
    let result = super.call("isCuratedPool", "isCuratedPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isCuratedPool(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCuratedPool",
      "isCuratedPool(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isListedPool(param0: Address): boolean {
    let result = super.call("isListedPool", "isListedPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isListedPool(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isListedPool", "isListedPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPool(pool: Address): boolean {
    let result = super.call("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(pool)
    ]);

    return result[0].toBoolean();
  }

  try_isPool(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolCount(): BigInt {
    let result = super.call("poolCount", "poolCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolCount", "poolCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenCount(): BigInt {
    let result = super.call("tokenCount", "tokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCount", "tokenCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _base(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wbnb(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCuratedPoolCall extends ethereum.Call {
  get inputs(): AddCuratedPoolCall__Inputs {
    return new AddCuratedPoolCall__Inputs(this);
  }

  get outputs(): AddCuratedPoolCall__Outputs {
    return new AddCuratedPoolCall__Outputs(this);
  }
}

export class AddCuratedPoolCall__Inputs {
  _call: AddCuratedPoolCall;

  constructor(call: AddCuratedPoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCuratedPoolCall__Outputs {
  _call: AddCuratedPoolCall;

  constructor(call: AddCuratedPoolCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreatePoolADDCall extends ethereum.Call {
  get inputs(): CreatePoolADDCall__Inputs {
    return new CreatePoolADDCall__Inputs(this);
  }

  get outputs(): CreatePoolADDCall__Outputs {
    return new CreatePoolADDCall__Outputs(this);
  }
}

export class CreatePoolADDCall__Inputs {
  _call: CreatePoolADDCall;

  constructor(call: CreatePoolADDCall) {
    this._call = call;
  }

  get inputBase(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get inputToken(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreatePoolADDCall__Outputs {
  _call: CreatePoolADDCall;

  constructor(call: CreatePoolADDCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PurgeDeployerCall extends ethereum.Call {
  get inputs(): PurgeDeployerCall__Inputs {
    return new PurgeDeployerCall__Inputs(this);
  }

  get outputs(): PurgeDeployerCall__Outputs {
    return new PurgeDeployerCall__Outputs(this);
  }
}

export class PurgeDeployerCall__Inputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class PurgeDeployerCall__Outputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class RemoveCuratedPoolCall extends ethereum.Call {
  get inputs(): RemoveCuratedPoolCall__Inputs {
    return new RemoveCuratedPoolCall__Inputs(this);
  }

  get outputs(): RemoveCuratedPoolCall__Outputs {
    return new RemoveCuratedPoolCall__Outputs(this);
  }
}

export class RemoveCuratedPoolCall__Inputs {
  _call: RemoveCuratedPoolCall;

  constructor(call: RemoveCuratedPoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCuratedPoolCall__Outputs {
  _call: RemoveCuratedPoolCall;

  constructor(call: RemoveCuratedPoolCall) {
    this._call = call;
  }
}
