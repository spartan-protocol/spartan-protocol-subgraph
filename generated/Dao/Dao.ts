// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelProposal extends ethereum.Event {
  get params(): CancelProposal__Params {
    return new CancelProposal__Params(this);
  }
}

export class CancelProposal__Params {
  _event: CancelProposal;

  constructor(event: CancelProposal) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositAsset extends ethereum.Event {
  get params(): DepositAsset__Params {
    return new DepositAsset__Params(this);
  }
}

export class DepositAsset__Params {
  _event: DepositAsset;

  constructor(event: DepositAsset) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bondedLP(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FinalisedProposal extends ethereum.Event {
  get params(): FinalisedProposal__Params {
    return new FinalisedProposal__Params(this);
  }
}

export class FinalisedProposal__Params {
  _event: FinalisedProposal;

  constructor(event: FinalisedProposal) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposalType(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MemberDeposits extends ethereum.Event {
  get params(): MemberDeposits__Params {
    return new MemberDeposits__Params(this);
  }
}

export class MemberDeposits__Params {
  _event: MemberDeposits;

  constructor(event: MemberDeposits) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MemberWithdraws extends ethereum.Event {
  get params(): MemberWithdraws__Params {
    return new MemberWithdraws__Params(this);
  }
}

export class MemberWithdraws__Params {
  _event: MemberWithdraws;

  constructor(event: MemberWithdraws) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewProposal extends ethereum.Event {
  get params(): NewProposal__Params {
    return new NewProposal__Params(this);
  }
}

export class NewProposal__Params {
  _event: NewProposal;

  constructor(event: NewProposal) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposalType(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NewVote extends ethereum.Event {
  get params(): NewVote__Params {
    return new NewVote__Params(this);
  }
}

export class NewVote__Params {
  _event: NewVote;

  constructor(event: NewVote) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposalType(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ProposalFinalising extends ethereum.Event {
  get params(): ProposalFinalising__Params {
    return new ProposalFinalising__Params(this);
  }
}

export class ProposalFinalising__Params {
  _event: ProposalFinalising;

  constructor(event: ProposalFinalising) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeFinalised(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalType(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class RemovedVote extends ethereum.Event {
  get params(): RemovedVote__Params {
    return new RemovedVote__Params(this);
  }
}

export class RemovedVote__Params {
  _event: RemovedVote;

  constructor(event: RemovedVote) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proposalType(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Dao__getProposalDetailsResultProposalDetailsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get proposalType(): string {
    return this[1].toString();
  }

  get votes(): BigInt {
    return this[2].toBigInt();
  }

  get coolOffTime(): BigInt {
    return this[3].toBigInt();
  }

  get finalising(): boolean {
    return this[4].toBoolean();
  }

  get finalised(): boolean {
    return this[5].toBoolean();
  }

  get param(): BigInt {
    return this[6].toBigInt();
  }

  get proposedAddress(): Address {
    return this[7].toAddress();
  }

  get open(): boolean {
    return this[8].toBoolean();
  }

  get startTime(): BigInt {
    return this[9].toBigInt();
  }
}

export class Dao extends ethereum.SmartContract {
  static bind(address: Address): Dao {
    return new Dao("Dao", address);
  }

  BASE(): Address {
    let result = super.call("BASE", "BASE():(address)", []);

    return result[0].toAddress();
  }

  try_BASE(): ethereum.CallResult<Address> {
    let result = super.tryCall("BASE", "BASE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BONDVAULT(): Address {
    let result = super.call("BONDVAULT", "BONDVAULT():(address)", []);

    return result[0].toAddress();
  }

  try_BONDVAULT(): ethereum.CallResult<Address> {
    let result = super.tryCall("BONDVAULT", "BONDVAULT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DAO(): Address {
    let result = super.call("DAO", "DAO():(address)", []);

    return result[0].toAddress();
  }

  try_DAO(): ethereum.CallResult<Address> {
    let result = super.tryCall("DAO", "DAO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DAOVAULT(): Address {
    let result = super.call("DAOVAULT", "DAOVAULT():(address)", []);

    return result[0].toAddress();
  }

  try_DAOVAULT(): ethereum.CallResult<Address> {
    let result = super.tryCall("DAOVAULT", "DAOVAULT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LEND(): Address {
    let result = super.call("LEND", "LEND():(address)", []);

    return result[0].toAddress();
  }

  try_LEND(): ethereum.CallResult<Address> {
    let result = super.tryCall("LEND", "LEND():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  POOLFACTORY(): Address {
    let result = super.call("POOLFACTORY", "POOLFACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_POOLFACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall("POOLFACTORY", "POOLFACTORY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  RESERVE(): Address {
    let result = super.call("RESERVE", "RESERVE():(address)", []);

    return result[0].toAddress();
  }

  try_RESERVE(): ethereum.CallResult<Address> {
    let result = super.tryCall("RESERVE", "RESERVE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ROUTER(): Address {
    let result = super.call("ROUTER", "ROUTER():(address)", []);

    return result[0].toAddress();
  }

  try_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall("ROUTER", "ROUTER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SYNTHFACTORY(): Address {
    let result = super.call("SYNTHFACTORY", "SYNTHFACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_SYNTHFACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall("SYNTHFACTORY", "SYNTHFACTORY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SYNTHVAULT(): Address {
    let result = super.call("SYNTHVAULT", "SYNTHVAULT():(address)", []);

    return result[0].toAddress();
  }

  try_SYNTHVAULT(): ethereum.CallResult<Address> {
    let result = super.tryCall("SYNTHVAULT", "SYNTHVAULT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UTILS(): Address {
    let result = super.call("UTILS", "UTILS():(address)", []);

    return result[0].toAddress();
  }

  try_UTILS(): ethereum.CallResult<Address> {
    let result = super.tryCall("UTILS", "UTILS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  arrayMembers(param0: BigInt): Address {
    let result = super.call("arrayMembers", "arrayMembers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_arrayMembers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "arrayMembers",
      "arrayMembers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnBalance(): boolean {
    let result = super.call("burnBalance", "burnBalance():(bool)", []);

    return result[0].toBoolean();
  }

  try_burnBalance(): ethereum.CallResult<boolean> {
    let result = super.tryCall("burnBalance", "burnBalance():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calcCurrentReward(member: Address): BigInt {
    let result = super.call(
      "calcCurrentReward",
      "calcCurrentReward(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );

    return result[0].toBigInt();
  }

  try_calcCurrentReward(member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcCurrentReward",
      "calcCurrentReward(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcReward(member: Address): BigInt {
    let result = super.call("calcReward", "calcReward(address):(uint256)", [
      ethereum.Value.fromAddress(member)
    ]);

    return result[0].toBigInt();
  }

  try_calcReward(member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("calcReward", "calcReward(address):(uint256)", [
      ethereum.Value.fromAddress(member)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelPeriod(): BigInt {
    let result = super.call("cancelPeriod", "cancelPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cancelPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cancelPeriod", "cancelPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coolOffPeriod(): BigInt {
    let result = super.call("coolOffPeriod", "coolOffPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_coolOffPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "coolOffPeriod",
      "coolOffPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentProposal(): BigInt {
    let result = super.call(
      "currentProposal",
      "currentProposal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentProposal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentProposal",
      "currentProposal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daoClaim(): BigInt {
    let result = super.call("daoClaim", "daoClaim():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoClaim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoClaim", "daoClaim():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daoFee(): BigInt {
    let result = super.call("daoFee", "daoFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoFee", "daoFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erasToEarn(): BigInt {
    let result = super.call("erasToEarn", "erasToEarn():(uint256)", []);

    return result[0].toBigInt();
  }

  try_erasToEarn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("erasToEarn", "erasToEarn():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalAssetVotes(proposal: BigInt, asset: Address): BigInt {
    let result = super.call(
      "getProposalAssetVotes",
      "getProposalAssetVotes(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposal),
        ethereum.Value.fromAddress(asset)
      ]
    );

    return result[0].toBigInt();
  }

  try_getProposalAssetVotes(
    proposal: BigInt,
    asset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalAssetVotes",
      "getProposalAssetVotes(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposal),
        ethereum.Value.fromAddress(asset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalDetails(
    proposalID: BigInt
  ): Dao__getProposalDetailsResultProposalDetailsStruct {
    let result = super.call(
      "getProposalDetails",
      "getProposalDetails(uint256):((uint256,string,uint256,uint256,bool,bool,uint256,address,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(proposalID)]
    );

    return changetype<Dao__getProposalDetailsResultProposalDetailsStruct>(
      result[0].toTuple()
    );
  }

  try_getProposalDetails(
    proposalID: BigInt
  ): ethereum.CallResult<Dao__getProposalDetailsResultProposalDetailsStruct> {
    let result = super.tryCall(
      "getProposalDetails",
      "getProposalDetails(uint256):((uint256,string,uint256,uint256,bool,bool,uint256,address,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(proposalID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Dao__getProposalDetailsResultProposalDetailsStruct>(
        value[0].toTuple()
      )
    );
  }

  hasMajority(_proposalID: BigInt): boolean {
    let result = super.call("hasMajority", "hasMajority(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalID)
    ]);

    return result[0].toBoolean();
  }

  try_hasMajority(_proposalID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasMajority", "hasMajority(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasQuorum(_proposalID: BigInt): boolean {
    let result = super.call("hasQuorum", "hasQuorum(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalID)
    ]);

    return result[0].toBoolean();
  }

  try_hasQuorum(_proposalID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasQuorum", "hasQuorum(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_proposalID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMember(param0: Address): boolean {
    let result = super.call("isMember", "isMember(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isMember(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMember", "isMember(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  majorityFactor(): BigInt {
    let result = super.call("majorityFactor", "majorityFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_majorityFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "majorityFactor",
      "majorityFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapMember_lastTime(param0: Address): BigInt {
    let result = super.call(
      "mapMember_lastTime",
      "mapMember_lastTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_mapMember_lastTime(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapMember_lastTime",
      "mapMember_lastTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapPID_open(param0: BigInt): boolean {
    let result = super.call("mapPID_open", "mapPID_open(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_mapPID_open(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mapPID_open", "mapPID_open(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  memberVoted(proposal: BigInt, member: Address): boolean {
    let result = super.call(
      "memberVoted",
      "memberVoted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(proposal),
        ethereum.Value.fromAddress(member)
      ]
    );

    return result[0].toBoolean();
  }

  try_memberVoted(
    proposal: BigInt,
    member: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "memberVoted",
      "memberVoted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(proposal),
        ethereum.Value.fromAddress(member)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  retire(): boolean {
    let result = super.call("retire", "retire():(bool)", []);

    return result[0].toBoolean();
  }

  try_retire(): ethereum.CallResult<boolean> {
    let result = super.tryCall("retire", "retire():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  running(): boolean {
    let result = super.call("running", "running():(bool)", []);

    return result[0].toBoolean();
  }

  try_running(): ethereum.CallResult<boolean> {
    let result = super.tryCall("running", "running():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _base(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BondCall extends ethereum.Call {
  get inputs(): BondCall__Inputs {
    return new BondCall__Inputs(this);
  }

  get outputs(): BondCall__Outputs {
    return new BondCall__Outputs(this);
  }
}

export class BondCall__Inputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BondCall__Outputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnBalanceCall extends ethereum.Call {
  get inputs(): BurnBalanceCall__Inputs {
    return new BurnBalanceCall__Inputs(this);
  }

  get outputs(): BurnBalanceCall__Outputs {
    return new BurnBalanceCall__Outputs(this);
  }
}

export class BurnBalanceCall__Inputs {
  _call: BurnBalanceCall;

  constructor(call: BurnBalanceCall) {
    this._call = call;
  }
}

export class BurnBalanceCall__Outputs {
  _call: BurnBalanceCall;

  constructor(call: BurnBalanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelProposalCall extends ethereum.Call {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get bondAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class FinaliseProposalCall extends ethereum.Call {
  get inputs(): FinaliseProposalCall__Inputs {
    return new FinaliseProposalCall__Inputs(this);
  }

  get outputs(): FinaliseProposalCall__Outputs {
    return new FinaliseProposalCall__Outputs(this);
  }
}

export class FinaliseProposalCall__Inputs {
  _call: FinaliseProposalCall;

  constructor(call: FinaliseProposalCall) {
    this._call = call;
  }
}

export class FinaliseProposalCall__Outputs {
  _call: FinaliseProposalCall;

  constructor(call: FinaliseProposalCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class MoveBASEBalanceCall extends ethereum.Call {
  get inputs(): MoveBASEBalanceCall__Inputs {
    return new MoveBASEBalanceCall__Inputs(this);
  }

  get outputs(): MoveBASEBalanceCall__Outputs {
    return new MoveBASEBalanceCall__Outputs(this);
  }
}

export class MoveBASEBalanceCall__Inputs {
  _call: MoveBASEBalanceCall;

  constructor(call: MoveBASEBalanceCall) {
    this._call = call;
  }

  get newDAO(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MoveBASEBalanceCall__Outputs {
  _call: MoveBASEBalanceCall;

  constructor(call: MoveBASEBalanceCall) {
    this._call = call;
  }
}

export class NewActionProposalCall extends ethereum.Call {
  get inputs(): NewActionProposalCall__Inputs {
    return new NewActionProposalCall__Inputs(this);
  }

  get outputs(): NewActionProposalCall__Outputs {
    return new NewActionProposalCall__Outputs(this);
  }
}

export class NewActionProposalCall__Inputs {
  _call: NewActionProposalCall;

  constructor(call: NewActionProposalCall) {
    this._call = call;
  }

  get typeStr(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class NewActionProposalCall__Outputs {
  _call: NewActionProposalCall;

  constructor(call: NewActionProposalCall) {
    this._call = call;
  }
}

export class NewAddressProposalCall extends ethereum.Call {
  get inputs(): NewAddressProposalCall__Inputs {
    return new NewAddressProposalCall__Inputs(this);
  }

  get outputs(): NewAddressProposalCall__Outputs {
    return new NewAddressProposalCall__Outputs(this);
  }
}

export class NewAddressProposalCall__Inputs {
  _call: NewAddressProposalCall;

  constructor(call: NewAddressProposalCall) {
    this._call = call;
  }

  get proposedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get typeStr(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NewAddressProposalCall__Outputs {
  _call: NewAddressProposalCall;

  constructor(call: NewAddressProposalCall) {
    this._call = call;
  }
}

export class NewGrantProposalCall extends ethereum.Call {
  get inputs(): NewGrantProposalCall__Inputs {
    return new NewGrantProposalCall__Inputs(this);
  }

  get outputs(): NewGrantProposalCall__Outputs {
    return new NewGrantProposalCall__Outputs(this);
  }
}

export class NewGrantProposalCall__Inputs {
  _call: NewGrantProposalCall;

  constructor(call: NewGrantProposalCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NewGrantProposalCall__Outputs {
  _call: NewGrantProposalCall;

  constructor(call: NewGrantProposalCall) {
    this._call = call;
  }
}

export class NewParamProposalCall extends ethereum.Call {
  get inputs(): NewParamProposalCall__Inputs {
    return new NewParamProposalCall__Inputs(this);
  }

  get outputs(): NewParamProposalCall__Outputs {
    return new NewParamProposalCall__Outputs(this);
  }
}

export class NewParamProposalCall__Inputs {
  _call: NewParamProposalCall;

  constructor(call: NewParamProposalCall) {
    this._call = call;
  }

  get param(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get typeStr(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NewParamProposalCall__Outputs {
  _call: NewParamProposalCall;

  constructor(call: NewParamProposalCall) {
    this._call = call;
  }
}

export class PollVotesCall extends ethereum.Call {
  get inputs(): PollVotesCall__Inputs {
    return new PollVotesCall__Inputs(this);
  }

  get outputs(): PollVotesCall__Outputs {
    return new PollVotesCall__Outputs(this);
  }
}

export class PollVotesCall__Inputs {
  _call: PollVotesCall;

  constructor(call: PollVotesCall) {
    this._call = call;
  }
}

export class PollVotesCall__Outputs {
  _call: PollVotesCall;

  constructor(call: PollVotesCall) {
    this._call = call;
  }
}

export class PurgeDeployerCall extends ethereum.Call {
  get inputs(): PurgeDeployerCall__Inputs {
    return new PurgeDeployerCall__Inputs(this);
  }

  get outputs(): PurgeDeployerCall__Outputs {
    return new PurgeDeployerCall__Outputs(this);
  }
}

export class PurgeDeployerCall__Inputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class PurgeDeployerCall__Outputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class RetireDaoCall extends ethereum.Call {
  get inputs(): RetireDaoCall__Inputs {
    return new RetireDaoCall__Inputs(this);
  }

  get outputs(): RetireDaoCall__Outputs {
    return new RetireDaoCall__Outputs(this);
  }
}

export class RetireDaoCall__Inputs {
  _call: RetireDaoCall;

  constructor(call: RetireDaoCall) {
    this._call = call;
  }
}

export class RetireDaoCall__Outputs {
  _call: RetireDaoCall;

  constructor(call: RetireDaoCall) {
    this._call = call;
  }
}

export class SetDaoFactorsCall extends ethereum.Call {
  get inputs(): SetDaoFactorsCall__Inputs {
    return new SetDaoFactorsCall__Inputs(this);
  }

  get outputs(): SetDaoFactorsCall__Outputs {
    return new SetDaoFactorsCall__Outputs(this);
  }
}

export class SetDaoFactorsCall__Inputs {
  _call: SetDaoFactorsCall;

  constructor(call: SetDaoFactorsCall) {
    this._call = call;
  }

  get _daoClaim(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _daoFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _running(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _cancelPeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetDaoFactorsCall__Outputs {
  _call: SetDaoFactorsCall;

  constructor(call: SetDaoFactorsCall) {
    this._call = call;
  }
}

export class SetFactoryAddressesCall extends ethereum.Call {
  get inputs(): SetFactoryAddressesCall__Inputs {
    return new SetFactoryAddressesCall__Inputs(this);
  }

  get outputs(): SetFactoryAddressesCall__Outputs {
    return new SetFactoryAddressesCall__Outputs(this);
  }
}

export class SetFactoryAddressesCall__Inputs {
  _call: SetFactoryAddressesCall;

  constructor(call: SetFactoryAddressesCall) {
    this._call = call;
  }

  get _poolFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _synthFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetFactoryAddressesCall__Outputs {
  _call: SetFactoryAddressesCall;

  constructor(call: SetFactoryAddressesCall) {
    this._call = call;
  }
}

export class SetGenesisAddressesCall extends ethereum.Call {
  get inputs(): SetGenesisAddressesCall__Inputs {
    return new SetGenesisAddressesCall__Inputs(this);
  }

  get outputs(): SetGenesisAddressesCall__Outputs {
    return new SetGenesisAddressesCall__Outputs(this);
  }
}

export class SetGenesisAddressesCall__Inputs {
  _call: SetGenesisAddressesCall;

  constructor(call: SetGenesisAddressesCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _utils(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _reserve(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lend(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetGenesisAddressesCall__Outputs {
  _call: SetGenesisAddressesCall;

  constructor(call: SetGenesisAddressesCall) {
    this._call = call;
  }
}

export class SetGenesisFactorsCall extends ethereum.Call {
  get inputs(): SetGenesisFactorsCall__Inputs {
    return new SetGenesisFactorsCall__Inputs(this);
  }

  get outputs(): SetGenesisFactorsCall__Outputs {
    return new SetGenesisFactorsCall__Outputs(this);
  }
}

export class SetGenesisFactorsCall__Inputs {
  _call: SetGenesisFactorsCall;

  constructor(call: SetGenesisFactorsCall) {
    this._call = call;
  }

  get _coolOff(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _erasToEarn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _majorityFactor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetGenesisFactorsCall__Outputs {
  _call: SetGenesisFactorsCall;

  constructor(call: SetGenesisFactorsCall) {
    this._call = call;
  }
}

export class SetVaultAddressesCall extends ethereum.Call {
  get inputs(): SetVaultAddressesCall__Inputs {
    return new SetVaultAddressesCall__Inputs(this);
  }

  get outputs(): SetVaultAddressesCall__Outputs {
    return new SetVaultAddressesCall__Outputs(this);
  }
}

export class SetVaultAddressesCall__Inputs {
  _call: SetVaultAddressesCall;

  constructor(call: SetVaultAddressesCall) {
    this._call = call;
  }

  get _daovault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bondvault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _synthVault(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetVaultAddressesCall__Outputs {
  _call: SetVaultAddressesCall;

  constructor(call: SetVaultAddressesCall) {
    this._call = call;
  }
}

export class UnvoteProposalCall extends ethereum.Call {
  get inputs(): UnvoteProposalCall__Inputs {
    return new UnvoteProposalCall__Inputs(this);
  }

  get outputs(): UnvoteProposalCall__Outputs {
    return new UnvoteProposalCall__Outputs(this);
  }
}

export class UnvoteProposalCall__Inputs {
  _call: UnvoteProposalCall;

  constructor(call: UnvoteProposalCall) {
    this._call = call;
  }
}

export class UnvoteProposalCall__Outputs {
  _call: UnvoteProposalCall;

  constructor(call: UnvoteProposalCall) {
    this._call = call;
  }
}

export class VoteProposalCall extends ethereum.Call {
  get inputs(): VoteProposalCall__Inputs {
    return new VoteProposalCall__Inputs(this);
  }

  get outputs(): VoteProposalCall__Outputs {
    return new VoteProposalCall__Outputs(this);
  }
}

export class VoteProposalCall__Inputs {
  _call: VoteProposalCall;

  constructor(call: VoteProposalCall) {
    this._call = call;
  }
}

export class VoteProposalCall__Outputs {
  _call: VoteProposalCall;

  constructor(call: VoteProposalCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
