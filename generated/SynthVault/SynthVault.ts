// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MemberDeposits extends ethereum.Event {
  get params(): MemberDeposits__Params {
    return new MemberDeposits__Params(this);
  }
}

export class MemberDeposits__Params {
  _event: MemberDeposits;

  constructor(event: MemberDeposits) {
    this._event = event;
  }

  get synth(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDeposit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MemberHarvests extends ethereum.Event {
  get params(): MemberHarvests__Params {
    return new MemberHarvests__Params(this);
  }
}

export class MemberHarvests__Params {
  _event: MemberHarvests;

  constructor(event: MemberHarvests) {
    this._event = event;
  }

  get synth(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MemberWithdraws extends ethereum.Event {
  get params(): MemberWithdraws__Params {
    return new MemberWithdraws__Params(this);
  }
}

export class MemberWithdraws__Params {
  _event: MemberWithdraws;

  constructor(event: MemberWithdraws) {
    this._event = event;
  }

  get synth(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SynthVault__calcRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_share(): BigInt {
    return this.value0;
  }

  get_vaultReward(): BigInt {
    return this.value1;
  }
}

export class SynthVault__getMemberSynthWeightResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMemberSynthWeight(): BigInt {
    return this.value0;
  }

  getSynthWeight(): BigInt {
    return this.value1;
  }

  getTotalSynthWeight(): BigInt {
    return this.value2;
  }
}

export class SynthVault extends ethereum.SmartContract {
  static bind(address: Address): SynthVault {
    return new SynthVault("SynthVault", address);
  }

  BASE(): Address {
    let result = super.call("BASE", "BASE():(address)", []);

    return result[0].toAddress();
  }

  try_BASE(): ethereum.CallResult<Address> {
    let result = super.tryCall("BASE", "BASE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEPLOYER(): Address {
    let result = super.call("DEPLOYER", "DEPLOYER():(address)", []);

    return result[0].toAddress();
  }

  try_DEPLOYER(): ethereum.CallResult<Address> {
    let result = super.tryCall("DEPLOYER", "DEPLOYER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calcCurrentReward(synth: Address, member: Address): BigInt {
    let result = super.call(
      "calcCurrentReward",
      "calcCurrentReward(address,address):(uint256)",
      [ethereum.Value.fromAddress(synth), ethereum.Value.fromAddress(member)]
    );

    return result[0].toBigInt();
  }

  try_calcCurrentReward(
    synth: Address,
    member: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcCurrentReward",
      "calcCurrentReward(address,address):(uint256)",
      [ethereum.Value.fromAddress(synth), ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcReward(_synth: Address, member: Address): SynthVault__calcRewardResult {
    let result = super.call(
      "calcReward",
      "calcReward(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_synth), ethereum.Value.fromAddress(member)]
    );

    return new SynthVault__calcRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcReward(
    _synth: Address,
    member: Address
  ): ethereum.CallResult<SynthVault__calcRewardResult> {
    let result = super.tryCall(
      "calcReward",
      "calcReward(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_synth), ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SynthVault__calcRewardResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  erasToEarn(): BigInt {
    let result = super.call("erasToEarn", "erasToEarn():(uint256)", []);

    return result[0].toBigInt();
  }

  try_erasToEarn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("erasToEarn", "erasToEarn():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  genesis(): BigInt {
    let result = super.call("genesis", "genesis():(uint256)", []);

    return result[0].toBigInt();
  }

  try_genesis(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("genesis", "genesis():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMemberDeposit(member: Address, synth: Address): BigInt {
    let result = super.call(
      "getMemberDeposit",
      "getMemberDeposit(address,address):(uint256)",
      [ethereum.Value.fromAddress(member), ethereum.Value.fromAddress(synth)]
    );

    return result[0].toBigInt();
  }

  try_getMemberDeposit(
    member: Address,
    synth: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMemberDeposit",
      "getMemberDeposit(address,address):(uint256)",
      [ethereum.Value.fromAddress(member), ethereum.Value.fromAddress(synth)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMemberLastSynthTime(synth: Address, member: Address): BigInt {
    let result = super.call(
      "getMemberLastSynthTime",
      "getMemberLastSynthTime(address,address):(uint256)",
      [ethereum.Value.fromAddress(synth), ethereum.Value.fromAddress(member)]
    );

    return result[0].toBigInt();
  }

  try_getMemberLastSynthTime(
    synth: Address,
    member: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMemberLastSynthTime",
      "getMemberLastSynthTime(address,address):(uint256)",
      [ethereum.Value.fromAddress(synth), ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMemberSynthWeight(
    _synth: Address,
    member: Address
  ): SynthVault__getMemberSynthWeightResult {
    let result = super.call(
      "getMemberSynthWeight",
      "getMemberSynthWeight(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_synth), ethereum.Value.fromAddress(member)]
    );

    return new SynthVault__getMemberSynthWeightResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMemberSynthWeight(
    _synth: Address,
    member: Address
  ): ethereum.CallResult<SynthVault__getMemberSynthWeightResult> {
    let result = super.tryCall(
      "getMemberSynthWeight",
      "getMemberSynthWeight(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_synth), ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SynthVault__getMemberSynthWeightResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTotalDeposit(synth: Address): BigInt {
    let result = super.call(
      "getTotalDeposit",
      "getTotalDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(synth)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDeposit(synth: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDeposit",
      "getTotalDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(synth)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestAll(synthAssets: Array<Address>): boolean {
    let result = super.call("harvestAll", "harvestAll(address[]):(bool)", [
      ethereum.Value.fromAddressArray(synthAssets)
    ]);

    return result[0].toBoolean();
  }

  try_harvestAll(synthAssets: Array<Address>): ethereum.CallResult<boolean> {
    let result = super.tryCall("harvestAll", "harvestAll(address[]):(bool)", [
      ethereum.Value.fromAddressArray(synthAssets)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  harvestSingle(synth: Address): boolean {
    let result = super.call("harvestSingle", "harvestSingle(address):(bool)", [
      ethereum.Value.fromAddress(synth)
    ]);

    return result[0].toBoolean();
  }

  try_harvestSingle(synth: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "harvestSingle",
      "harvestSingle(address):(bool)",
      [ethereum.Value.fromAddress(synth)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastMonth(): BigInt {
    let result = super.call("lastMonth", "lastMonth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastMonth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastMonth", "lastMonth():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  map30DVaultRevenue(): BigInt {
    let result = super.call(
      "map30DVaultRevenue",
      "map30DVaultRevenue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_map30DVaultRevenue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "map30DVaultRevenue",
      "map30DVaultRevenue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapMember_depositTime(param0: Address): BigInt {
    let result = super.call(
      "mapMember_depositTime",
      "mapMember_depositTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_mapMember_depositTime(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapMember_depositTime",
      "mapMember_depositTime(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapPast30DVaultRevenue(): BigInt {
    let result = super.call(
      "mapPast30DVaultRevenue",
      "mapPast30DVaultRevenue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mapPast30DVaultRevenue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapPast30DVaultRevenue",
      "mapPast30DVaultRevenue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mapTotalSynth_balance(param0: Address): BigInt {
    let result = super.call(
      "mapTotalSynth_balance",
      "mapTotalSynth_balance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_mapTotalSynth_balance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mapTotalSynth_balance",
      "mapTotalSynth_balance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumDepositTime(): BigInt {
    let result = super.call(
      "minimumDepositTime",
      "minimumDepositTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumDepositTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumDepositTime",
      "minimumDepositTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveBASE(): BigInt {
    let result = super.call("reserveBASE", "reserveBASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveBASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveBASE", "reserveBASE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revenueArray(param0: BigInt): BigInt {
    let result = super.call("revenueArray", "revenueArray(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_revenueArray(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "revenueArray",
      "revenueArray(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultClaim(): BigInt {
    let result = super.call("vaultClaim", "vaultClaim():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultClaim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultClaim", "vaultClaim():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _base(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CalcCurrentRewardCall extends ethereum.Call {
  get inputs(): CalcCurrentRewardCall__Inputs {
    return new CalcCurrentRewardCall__Inputs(this);
  }

  get outputs(): CalcCurrentRewardCall__Outputs {
    return new CalcCurrentRewardCall__Outputs(this);
  }
}

export class CalcCurrentRewardCall__Inputs {
  _call: CalcCurrentRewardCall;

  constructor(call: CalcCurrentRewardCall) {
    this._call = call;
  }

  get synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get member(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CalcCurrentRewardCall__Outputs {
  _call: CalcCurrentRewardCall;

  constructor(call: CalcCurrentRewardCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CalcRewardCall extends ethereum.Call {
  get inputs(): CalcRewardCall__Inputs {
    return new CalcRewardCall__Inputs(this);
  }

  get outputs(): CalcRewardCall__Outputs {
    return new CalcRewardCall__Outputs(this);
  }
}

export class CalcRewardCall__Inputs {
  _call: CalcRewardCall;

  constructor(call: CalcRewardCall) {
    this._call = call;
  }

  get _synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get member(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CalcRewardCall__Outputs {
  _call: CalcRewardCall;

  constructor(call: CalcRewardCall) {
    this._call = call;
  }

  get _share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _vaultReward(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositForMemberCall extends ethereum.Call {
  get inputs(): DepositForMemberCall__Inputs {
    return new DepositForMemberCall__Inputs(this);
  }

  get outputs(): DepositForMemberCall__Outputs {
    return new DepositForMemberCall__Outputs(this);
  }
}

export class DepositForMemberCall__Inputs {
  _call: DepositForMemberCall;

  constructor(call: DepositForMemberCall) {
    this._call = call;
  }

  get synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get member(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositForMemberCall__Outputs {
  _call: DepositForMemberCall;

  constructor(call: DepositForMemberCall) {
    this._call = call;
  }
}

export class GetMemberSynthWeightCall extends ethereum.Call {
  get inputs(): GetMemberSynthWeightCall__Inputs {
    return new GetMemberSynthWeightCall__Inputs(this);
  }

  get outputs(): GetMemberSynthWeightCall__Outputs {
    return new GetMemberSynthWeightCall__Outputs(this);
  }
}

export class GetMemberSynthWeightCall__Inputs {
  _call: GetMemberSynthWeightCall;

  constructor(call: GetMemberSynthWeightCall) {
    this._call = call;
  }

  get _synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get member(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetMemberSynthWeightCall__Outputs {
  _call: GetMemberSynthWeightCall;

  constructor(call: GetMemberSynthWeightCall) {
    this._call = call;
  }

  get memberSynthWeight(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get synthWeight(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get totalSynthWeight(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class HarvestAllCall extends ethereum.Call {
  get inputs(): HarvestAllCall__Inputs {
    return new HarvestAllCall__Inputs(this);
  }

  get outputs(): HarvestAllCall__Outputs {
    return new HarvestAllCall__Outputs(this);
  }
}

export class HarvestAllCall__Inputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }

  get synthAssets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class HarvestAllCall__Outputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class HarvestSingleCall extends ethereum.Call {
  get inputs(): HarvestSingleCall__Inputs {
    return new HarvestSingleCall__Inputs(this);
  }

  get outputs(): HarvestSingleCall__Outputs {
    return new HarvestSingleCall__Outputs(this);
  }
}

export class HarvestSingleCall__Inputs {
  _call: HarvestSingleCall;

  constructor(call: HarvestSingleCall) {
    this._call = call;
  }

  get synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class HarvestSingleCall__Outputs {
  _call: HarvestSingleCall;

  constructor(call: HarvestSingleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PurgeDeployerCall extends ethereum.Call {
  get inputs(): PurgeDeployerCall__Inputs {
    return new PurgeDeployerCall__Inputs(this);
  }

  get outputs(): PurgeDeployerCall__Outputs {
    return new PurgeDeployerCall__Outputs(this);
  }
}

export class PurgeDeployerCall__Inputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class PurgeDeployerCall__Outputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class SetParamsCall extends ethereum.Call {
  get inputs(): SetParamsCall__Inputs {
    return new SetParamsCall__Inputs(this);
  }

  get outputs(): SetParamsCall__Outputs {
    return new SetParamsCall__Outputs(this);
  }
}

export class SetParamsCall__Inputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }

  get _erasToEarn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _vaultClaim(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetParamsCall__Outputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }
}

export class SetReserveClaimCall extends ethereum.Call {
  get inputs(): SetReserveClaimCall__Inputs {
    return new SetReserveClaimCall__Inputs(this);
  }

  get outputs(): SetReserveClaimCall__Outputs {
    return new SetReserveClaimCall__Outputs(this);
  }
}

export class SetReserveClaimCall__Inputs {
  _call: SetReserveClaimCall;

  constructor(call: SetReserveClaimCall) {
    this._call = call;
  }

  get _setSynthClaim(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReserveClaimCall__Outputs {
  _call: SetReserveClaimCall;

  constructor(call: SetReserveClaimCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get basisPoints(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
