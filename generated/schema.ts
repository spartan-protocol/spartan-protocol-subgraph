// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolFactory", id.toString(), this);
  }

  static load(id: string): PoolFactory | null {
    return store.get("PoolFactory", id) as PoolFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get genesis(): BigInt {
    let value = this.get("genesis");
    return value.toBigInt();
  }

  set genesis(value: BigInt) {
    this.set("genesis", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get baseAmount(): BigDecimal {
    let value = this.get("baseAmount");
    return value.toBigDecimal();
  }

  set baseAmount(value: BigDecimal) {
    this.set("baseAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get liqAdds(): Array<string> {
    let value = this.get("liqAdds");
    return value.toStringArray();
  }

  set liqAdds(value: Array<string>) {
    this.set("liqAdds", Value.fromStringArray(value));
  }

  get liqRemoves(): Array<string> {
    let value = this.get("liqRemoves");
    return value.toStringArray();
  }

  set liqRemoves(value: Array<string>) {
    this.set("liqRemoves", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get mintSynths(): Array<string> {
    let value = this.get("mintSynths");
    return value.toStringArray();
  }

  set mintSynths(value: Array<string>) {
    this.set("mintSynths", Value.fromStringArray(value));
  }

  get burnSynths(): Array<string> {
    let value = this.get("burnSynths");
    return value.toStringArray();
  }

  set burnSynths(value: Array<string>) {
    this.set("burnSynths", Value.fromStringArray(value));
  }

  get stablecoin(): boolean {
    let value = this.get("stablecoin");
    return value.toBoolean();
  }

  set stablecoin(value: boolean) {
    this.set("stablecoin", Value.fromBoolean(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get liqAdds(): Array<string | null> {
    let value = this.get("liqAdds");
    return value.toStringArray();
  }

  set liqAdds(value: Array<string | null>) {
    this.set("liqAdds", Value.fromStringArray(value));
  }

  get liqRemoves(): Array<string | null> {
    let value = this.get("liqRemoves");
    return value.toStringArray();
  }

  set liqRemoves(value: Array<string | null>) {
    this.set("liqRemoves", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get mintSynths(): Array<string | null> {
    let value = this.get("mintSynths");
    return value.toStringArray();
  }

  set mintSynths(value: Array<string | null>) {
    this.set("mintSynths", Value.fromStringArray(value));
  }

  get burnSynths(): Array<string | null> {
    let value = this.get("burnSynths");
    return value.toStringArray();
  }

  set burnSynths(value: Array<string | null>) {
    this.set("burnSynths", Value.fromStringArray(value));
  }
}

export class LiqAdd extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiqAdd entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiqAdd entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiqAdd", id.toString(), this);
  }

  static load(id: string): LiqAdd | null {
    return store.get("LiqAdd", id) as LiqAdd | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): Bytes {
    let value = this.get("member");
    return value.toBytes();
  }

  set member(value: Bytes) {
    this.set("member", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get inputBase(): BigDecimal {
    let value = this.get("inputBase");
    return value.toBigDecimal();
  }

  set inputBase(value: BigDecimal) {
    this.set("inputBase", Value.fromBigDecimal(value));
  }

  get inputToken(): BigDecimal {
    let value = this.get("inputToken");
    return value.toBigDecimal();
  }

  set inputToken(value: BigDecimal) {
    this.set("inputToken", Value.fromBigDecimal(value));
  }

  get unitsIssued(): BigDecimal {
    let value = this.get("unitsIssued");
    return value.toBigDecimal();
  }

  set unitsIssued(value: BigDecimal) {
    this.set("unitsIssued", Value.fromBigDecimal(value));
  }
}

export class LiqRemove extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiqRemove entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiqRemove entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiqRemove", id.toString(), this);
  }

  static load(id: string): LiqRemove | null {
    return store.get("LiqRemove", id) as LiqRemove | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): Bytes {
    let value = this.get("member");
    return value.toBytes();
  }

  set member(value: Bytes) {
    this.set("member", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get burnedLPs(): BigDecimal {
    let value = this.get("burnedLPs");
    return value.toBigDecimal();
  }

  set burnedLPs(value: BigDecimal) {
    this.set("burnedLPs", Value.fromBigDecimal(value));
  }

  get outputSparta(): BigDecimal {
    let value = this.get("outputSparta");
    return value.toBigDecimal();
  }

  set outputSparta(value: BigDecimal) {
    this.set("outputSparta", Value.fromBigDecimal(value));
  }

  get outputToken(): BigDecimal {
    let value = this.get("outputToken");
    return value.toBigDecimal();
  }

  set outputToken(value: BigDecimal) {
    this.set("outputToken", Value.fromBigDecimal(value));
  }

  get outputUSD(): BigDecimal {
    let value = this.get("outputUSD");
    return value.toBigDecimal();
  }

  set outputUSD(value: BigDecimal) {
    this.set("outputUSD", Value.fromBigDecimal(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): Bytes {
    let value = this.get("member");
    return value.toBytes();
  }

  set member(value: Bytes) {
    this.set("member", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get fromAmount(): BigDecimal {
    let value = this.get("fromAmount");
    return value.toBigDecimal();
  }

  set fromAmount(value: BigDecimal) {
    this.set("fromAmount", Value.fromBigDecimal(value));
  }

  get toAmount(): BigDecimal {
    let value = this.get("toAmount");
    return value.toBigDecimal();
  }

  set toAmount(value: BigDecimal) {
    this.set("toAmount", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class MintSynth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintSynth entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintSynth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintSynth", id.toString(), this);
  }

  static load(id: string): MintSynth | null {
    return store.get("MintSynth", id) as MintSynth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): Bytes {
    let value = this.get("member");
    return value.toBytes();
  }

  set member(value: Bytes) {
    this.set("member", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get inputSparta(): BigDecimal {
    let value = this.get("inputSparta");
    return value.toBigDecimal();
  }

  set inputSparta(value: BigDecimal) {
    this.set("inputSparta", Value.fromBigDecimal(value));
  }

  get inputUSD(): BigDecimal {
    let value = this.get("inputUSD");
    return value.toBigDecimal();
  }

  set inputUSD(value: BigDecimal) {
    this.set("inputUSD", Value.fromBigDecimal(value));
  }

  get mintedSynths(): BigDecimal {
    let value = this.get("mintedSynths");
    return value.toBigDecimal();
  }

  set mintedSynths(value: BigDecimal) {
    this.set("mintedSynths", Value.fromBigDecimal(value));
  }
}

export class BurnSynth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BurnSynth entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BurnSynth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BurnSynth", id.toString(), this);
  }

  static load(id: string): BurnSynth | null {
    return store.get("BurnSynth", id) as BurnSynth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): Bytes {
    let value = this.get("member");
    return value.toBytes();
  }

  set member(value: Bytes) {
    this.set("member", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get burnedSynths(): BigDecimal {
    let value = this.get("burnedSynths");
    return value.toBigDecimal();
  }

  set burnedSynths(value: BigDecimal) {
    this.set("burnedSynths", Value.fromBigDecimal(value));
  }

  get outputSparta(): BigDecimal {
    let value = this.get("outputSparta");
    return value.toBigDecimal();
  }

  set outputSparta(value: BigDecimal) {
    this.set("outputSparta", Value.fromBigDecimal(value));
  }

  get outputUSD(): BigDecimal {
    let value = this.get("outputUSD");
    return value.toBigDecimal();
  }

  set outputUSD(value: BigDecimal) {
    this.set("outputUSD", Value.fromBigDecimal(value));
  }
}

export class MetricsGlobalDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetricsGlobalDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetricsGlobalDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetricsGlobalDay", id.toString(), this);
  }

  static load(id: string): MetricsGlobalDay | null {
    return store.get("MetricsGlobalDay", id) as MetricsGlobalDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get volSPARTA(): BigDecimal {
    let value = this.get("volSPARTA");
    return value.toBigDecimal();
  }

  set volSPARTA(value: BigDecimal) {
    this.set("volSPARTA", Value.fromBigDecimal(value));
  }

  get volBNB(): BigDecimal {
    let value = this.get("volBNB");
    return value.toBigDecimal();
  }

  set volBNB(value: BigDecimal) {
    this.set("volBNB", Value.fromBigDecimal(value));
  }

  get volUSD(): BigDecimal {
    let value = this.get("volUSD");
    return value.toBigDecimal();
  }

  set volUSD(value: BigDecimal) {
    this.set("volUSD", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tvlSPARTA(): BigDecimal {
    let value = this.get("tvlSPARTA");
    return value.toBigDecimal();
  }

  set tvlSPARTA(value: BigDecimal) {
    this.set("tvlSPARTA", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}

export class MetricsPoolDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetricsPoolDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetricsPoolDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetricsPoolDay", id.toString(), this);
  }

  static load(id: string): MetricsPoolDay | null {
    return store.get("MetricsPoolDay", id) as MetricsPoolDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get volSPARTA(): BigDecimal {
    let value = this.get("volSPARTA");
    return value.toBigDecimal();
  }

  set volSPARTA(value: BigDecimal) {
    this.set("volSPARTA", Value.fromBigDecimal(value));
  }

  get volBNB(): BigDecimal {
    let value = this.get("volBNB");
    return value.toBigDecimal();
  }

  set volBNB(value: BigDecimal) {
    this.set("volBNB", Value.fromBigDecimal(value));
  }

  get volUSD(): BigDecimal {
    let value = this.get("volUSD");
    return value.toBigDecimal();
  }

  set volUSD(value: BigDecimal) {
    this.set("volUSD", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tvlSPARTA(): BigDecimal {
    let value = this.get("tvlSPARTA");
    return value.toBigDecimal();
  }

  set tvlSPARTA(value: BigDecimal) {
    this.set("tvlSPARTA", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}
