// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolFactory", id.toString(), this);
  }

  static load(id: string): PoolFactory | null {
    return store.get("PoolFactory", id) as PoolFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get tokenCount(): BigInt {
    let value = this.get("tokenCount");
    return value.toBigInt();
  }

  set tokenCount(value: BigInt) {
    this.set("tokenCount", Value.fromBigInt(value));
  }

  get spartaDerivedUSD(): BigDecimal {
    let value = this.get("spartaDerivedUSD");
    return value.toBigDecimal();
  }

  set spartaDerivedUSD(value: BigDecimal) {
    this.set("spartaDerivedUSD", Value.fromBigDecimal(value));
  }

  get tvlSPARTA(): BigDecimal {
    let value = this.get("tvlSPARTA");
    return value.toBigDecimal();
  }

  set tvlSPARTA(value: BigDecimal) {
    this.set("tvlSPARTA", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get genesis(): BigInt {
    let value = this.get("genesis");
    return value.toBigInt();
  }

  set genesis(value: BigInt) {
    this.set("genesis", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get baseAmount(): BigDecimal {
    let value = this.get("baseAmount");
    return value.toBigDecimal();
  }

  set baseAmount(value: BigDecimal) {
    this.set("baseAmount", Value.fromBigDecimal(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get incentives(): BigDecimal {
    let value = this.get("incentives");
    return value.toBigDecimal();
  }

  set incentives(value: BigDecimal) {
    this.set("incentives", Value.fromBigDecimal(value));
  }

  get incentivesUSD(): BigDecimal {
    let value = this.get("incentivesUSD");
    return value.toBigDecimal();
  }

  set incentivesUSD(value: BigDecimal) {
    this.set("incentivesUSD", Value.fromBigDecimal(value));
  }

  get stablecoin(): boolean {
    let value = this.get("stablecoin");
    return value.toBoolean();
  }

  set stablecoin(value: boolean) {
    this.set("stablecoin", Value.fromBoolean(value));
  }

  get tvlSPARTA(): BigDecimal {
    let value = this.get("tvlSPARTA");
    return value.toBigDecimal();
  }

  set tvlSPARTA(value: BigDecimal) {
    this.set("tvlSPARTA", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get liqAdds(): Array<string> {
    let value = this.get("liqAdds");
    return value.toStringArray();
  }

  set liqAdds(value: Array<string>) {
    this.set("liqAdds", Value.fromStringArray(value));
  }

  get liqRemoves(): Array<string> {
    let value = this.get("liqRemoves");
    return value.toStringArray();
  }

  set liqRemoves(value: Array<string>) {
    this.set("liqRemoves", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get forgeSynths(): Array<string> {
    let value = this.get("forgeSynths");
    return value.toStringArray();
  }

  set forgeSynths(value: Array<string>) {
    this.set("forgeSynths", Value.fromStringArray(value));
  }

  get meltSynths(): Array<string> {
    let value = this.get("meltSynths");
    return value.toStringArray();
  }

  set meltSynths(value: Array<string>) {
    this.set("meltSynths", Value.fromStringArray(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Member entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Member entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Member", id.toString(), this);
  }

  static load(id: string): Member | null {
    return store.get("Member", id) as Member | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get netAddSparta(): BigDecimal {
    let value = this.get("netAddSparta");
    return value.toBigDecimal();
  }

  set netAddSparta(value: BigDecimal) {
    this.set("netAddSparta", Value.fromBigDecimal(value));
  }

  get netRemSparta(): BigDecimal {
    let value = this.get("netRemSparta");
    return value.toBigDecimal();
  }

  set netRemSparta(value: BigDecimal) {
    this.set("netRemSparta", Value.fromBigDecimal(value));
  }

  get netAddUsd(): BigDecimal {
    let value = this.get("netAddUsd");
    return value.toBigDecimal();
  }

  set netAddUsd(value: BigDecimal) {
    this.set("netAddUsd", Value.fromBigDecimal(value));
  }

  get netRemUsd(): BigDecimal {
    let value = this.get("netRemUsd");
    return value.toBigDecimal();
  }

  set netRemUsd(value: BigDecimal) {
    this.set("netRemUsd", Value.fromBigDecimal(value));
  }

  get netHarvestSparta(): BigDecimal {
    let value = this.get("netHarvestSparta");
    return value.toBigDecimal();
  }

  set netHarvestSparta(value: BigDecimal) {
    this.set("netHarvestSparta", Value.fromBigDecimal(value));
  }

  get netHarvestUsd(): BigDecimal {
    let value = this.get("netHarvestUsd");
    return value.toBigDecimal();
  }

  set netHarvestUsd(value: BigDecimal) {
    this.set("netHarvestUsd", Value.fromBigDecimal(value));
  }

  get liqAdds(): Array<string> {
    let value = this.get("liqAdds");
    return value.toStringArray();
  }

  set liqAdds(value: Array<string>) {
    this.set("liqAdds", Value.fromStringArray(value));
  }

  get liqRemoves(): Array<string> {
    let value = this.get("liqRemoves");
    return value.toStringArray();
  }

  set liqRemoves(value: Array<string>) {
    this.set("liqRemoves", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get forgeSynths(): Array<string> {
    let value = this.get("forgeSynths");
    return value.toStringArray();
  }

  set forgeSynths(value: Array<string>) {
    this.set("forgeSynths", Value.fromStringArray(value));
  }

  get meltSynths(): Array<string> {
    let value = this.get("meltSynths");
    return value.toStringArray();
  }

  set meltSynths(value: Array<string>) {
    this.set("meltSynths", Value.fromStringArray(value));
  }

  get harvests(): Array<string | null> {
    let value = this.get("harvests");
    return value.toStringArray();
  }

  set harvests(value: Array<string | null>) {
    this.set("harvests", Value.fromStringArray(value));
  }

  get bonds(): Array<string | null> {
    let value = this.get("bonds");
    return value.toStringArray();
  }

  set bonds(value: Array<string | null>) {
    this.set("bonds", Value.fromStringArray(value));
  }

  get positions(): Array<string | null> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string | null>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get netAddSparta(): BigDecimal {
    let value = this.get("netAddSparta");
    return value.toBigDecimal();
  }

  set netAddSparta(value: BigDecimal) {
    this.set("netAddSparta", Value.fromBigDecimal(value));
  }

  get netRemSparta(): BigDecimal {
    let value = this.get("netRemSparta");
    return value.toBigDecimal();
  }

  set netRemSparta(value: BigDecimal) {
    this.set("netRemSparta", Value.fromBigDecimal(value));
  }

  get netAddToken(): BigDecimal {
    let value = this.get("netAddToken");
    return value.toBigDecimal();
  }

  set netAddToken(value: BigDecimal) {
    this.set("netAddToken", Value.fromBigDecimal(value));
  }

  get netRemToken(): BigDecimal {
    let value = this.get("netRemToken");
    return value.toBigDecimal();
  }

  set netRemToken(value: BigDecimal) {
    this.set("netRemToken", Value.fromBigDecimal(value));
  }

  get netAddUsd(): BigDecimal {
    let value = this.get("netAddUsd");
    return value.toBigDecimal();
  }

  set netAddUsd(value: BigDecimal) {
    this.set("netAddUsd", Value.fromBigDecimal(value));
  }

  get netRemUsd(): BigDecimal {
    let value = this.get("netRemUsd");
    return value.toBigDecimal();
  }

  set netRemUsd(value: BigDecimal) {
    this.set("netRemUsd", Value.fromBigDecimal(value));
  }

  get netLiqUnits(): BigDecimal {
    let value = this.get("netLiqUnits");
    return value.toBigDecimal();
  }

  set netLiqUnits(value: BigDecimal) {
    this.set("netLiqUnits", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get liqAdds(): Array<string | null> {
    let value = this.get("liqAdds");
    return value.toStringArray();
  }

  set liqAdds(value: Array<string | null>) {
    this.set("liqAdds", Value.fromStringArray(value));
  }

  get liqRemoves(): Array<string | null> {
    let value = this.get("liqRemoves");
    return value.toStringArray();
  }

  set liqRemoves(value: Array<string | null>) {
    this.set("liqRemoves", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get forgeSynths(): Array<string | null> {
    let value = this.get("forgeSynths");
    return value.toStringArray();
  }

  set forgeSynths(value: Array<string | null>) {
    this.set("forgeSynths", Value.fromStringArray(value));
  }

  get meltSynths(): Array<string | null> {
    let value = this.get("meltSynths");
    return value.toStringArray();
  }

  set meltSynths(value: Array<string | null>) {
    this.set("meltSynths", Value.fromStringArray(value));
  }

  get harvests(): Array<string | null> {
    let value = this.get("harvests");
    return value.toStringArray();
  }

  set harvests(value: Array<string | null>) {
    this.set("harvests", Value.fromStringArray(value));
  }

  get bonds(): Array<string | null> {
    let value = this.get("bonds");
    return value.toStringArray();
  }

  set bonds(value: Array<string | null>) {
    this.set("bonds", Value.fromStringArray(value));
  }
}

export class LiqAdd extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiqAdd entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiqAdd entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiqAdd", id.toString(), this);
  }

  static load(id: string): LiqAdd | null {
    return store.get("LiqAdd", id) as LiqAdd | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get inputBase(): BigDecimal {
    let value = this.get("inputBase");
    return value.toBigDecimal();
  }

  set inputBase(value: BigDecimal) {
    this.set("inputBase", Value.fromBigDecimal(value));
  }

  get inputToken(): BigDecimal {
    let value = this.get("inputToken");
    return value.toBigDecimal();
  }

  set inputToken(value: BigDecimal) {
    this.set("inputToken", Value.fromBigDecimal(value));
  }

  get unitsIssued(): BigDecimal {
    let value = this.get("unitsIssued");
    return value.toBigDecimal();
  }

  set unitsIssued(value: BigDecimal) {
    this.set("unitsIssued", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class LiqRemove extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiqRemove entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiqRemove entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiqRemove", id.toString(), this);
  }

  static load(id: string): LiqRemove | null {
    return store.get("LiqRemove", id) as LiqRemove | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get inputLPs(): BigDecimal {
    let value = this.get("inputLPs");
    return value.toBigDecimal();
  }

  set inputLPs(value: BigDecimal) {
    this.set("inputLPs", Value.fromBigDecimal(value));
  }

  get outputToken(): BigDecimal {
    let value = this.get("outputToken");
    return value.toBigDecimal();
  }

  set outputToken(value: BigDecimal) {
    this.set("outputToken", Value.fromBigDecimal(value));
  }

  get outputSparta(): BigDecimal {
    let value = this.get("outputSparta");
    return value.toBigDecimal();
  }

  set outputSparta(value: BigDecimal) {
    this.set("outputSparta", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get fromSparta(): boolean {
    let value = this.get("fromSparta");
    return value.toBoolean();
  }

  set fromSparta(value: boolean) {
    this.set("fromSparta", Value.fromBoolean(value));
  }

  get input(): BigDecimal {
    let value = this.get("input");
    return value.toBigDecimal();
  }

  set input(value: BigDecimal) {
    this.set("input", Value.fromBigDecimal(value));
  }

  get output(): BigDecimal {
    let value = this.get("output");
    return value.toBigDecimal();
  }

  set output(value: BigDecimal) {
    this.set("output", Value.fromBigDecimal(value));
  }

  get derivedSparta(): BigDecimal {
    let value = this.get("derivedSparta");
    return value.toBigDecimal();
  }

  set derivedSparta(value: BigDecimal) {
    this.set("derivedSparta", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class ForgeSynth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ForgeSynth entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ForgeSynth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ForgeSynth", id.toString(), this);
  }

  static load(id: string): ForgeSynth | null {
    return store.get("ForgeSynth", id) as ForgeSynth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get inputSparta(): BigDecimal {
    let value = this.get("inputSparta");
    return value.toBigDecimal();
  }

  set inputSparta(value: BigDecimal) {
    this.set("inputSparta", Value.fromBigDecimal(value));
  }

  get mintedSynths(): BigDecimal {
    let value = this.get("mintedSynths");
    return value.toBigDecimal();
  }

  set mintedSynths(value: BigDecimal) {
    this.set("mintedSynths", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class MeltSynth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MeltSynth entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MeltSynth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MeltSynth", id.toString(), this);
  }

  static load(id: string): MeltSynth | null {
    return store.get("MeltSynth", id) as MeltSynth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get outputSparta(): BigDecimal {
    let value = this.get("outputSparta");
    return value.toBigDecimal();
  }

  set outputSparta(value: BigDecimal) {
    this.set("outputSparta", Value.fromBigDecimal(value));
  }

  get burnedSynths(): BigDecimal {
    let value = this.get("burnedSynths");
    return value.toBigDecimal();
  }

  set burnedSynths(value: BigDecimal) {
    this.set("burnedSynths", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class Harvest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Harvest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Harvest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Harvest", id.toString(), this);
  }

  static load(id: string): Harvest | null {
    return store.get("Harvest", id) as Harvest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get derivedSparta(): BigDecimal {
    let value = this.get("derivedSparta");
    return value.toBigDecimal();
  }

  set derivedSparta(value: BigDecimal) {
    this.set("derivedSparta", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class Bond extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bond entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bond entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bond", id.toString(), this);
  }

  static load(id: string): Bond | null {
    return store.get("Bond", id) as Bond | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get inputToken(): BigDecimal {
    let value = this.get("inputToken");
    return value.toBigDecimal();
  }

  set inputToken(value: BigDecimal) {
    this.set("inputToken", Value.fromBigDecimal(value));
  }

  get unitsIssued(): BigDecimal {
    let value = this.get("unitsIssued");
    return value.toBigDecimal();
  }

  set unitsIssued(value: BigDecimal) {
    this.set("unitsIssued", Value.fromBigDecimal(value));
  }

  get derivedUSD(): BigDecimal {
    let value = this.get("derivedUSD");
    return value.toBigDecimal();
  }

  set derivedUSD(value: BigDecimal) {
    this.set("derivedUSD", Value.fromBigDecimal(value));
  }
}

export class MetricsGlobalDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetricsGlobalDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetricsGlobalDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetricsGlobalDay", id.toString(), this);
  }

  static load(id: string): MetricsGlobalDay | null {
    return store.get("MetricsGlobalDay", id) as MetricsGlobalDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get volSPARTA(): BigDecimal {
    let value = this.get("volSPARTA");
    return value.toBigDecimal();
  }

  set volSPARTA(value: BigDecimal) {
    this.set("volSPARTA", Value.fromBigDecimal(value));
  }

  get volUSD(): BigDecimal {
    let value = this.get("volUSD");
    return value.toBigDecimal();
  }

  set volUSD(value: BigDecimal) {
    this.set("volUSD", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tvlSPARTA(): BigDecimal {
    let value = this.get("tvlSPARTA");
    return value.toBigDecimal();
  }

  set tvlSPARTA(value: BigDecimal) {
    this.set("tvlSPARTA", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get synthVaultHarvest(): BigDecimal {
    let value = this.get("synthVaultHarvest");
    return value.toBigDecimal();
  }

  set synthVaultHarvest(value: BigDecimal) {
    this.set("synthVaultHarvest", Value.fromBigDecimal(value));
  }

  get daoVaultHarvest(): BigDecimal {
    let value = this.get("daoVaultHarvest");
    return value.toBigDecimal();
  }

  set daoVaultHarvest(value: BigDecimal) {
    this.set("daoVaultHarvest", Value.fromBigDecimal(value));
  }

  get synthVault30Day(): BigDecimal {
    let value = this.get("synthVault30Day");
    return value.toBigDecimal();
  }

  set synthVault30Day(value: BigDecimal) {
    this.set("synthVault30Day", Value.fromBigDecimal(value));
  }

  get daoVault30Day(): BigDecimal {
    let value = this.get("daoVault30Day");
    return value.toBigDecimal();
  }

  set daoVault30Day(value: BigDecimal) {
    this.set("daoVault30Day", Value.fromBigDecimal(value));
  }
}

export class MetricsPoolDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetricsPoolDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetricsPoolDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetricsPoolDay", id.toString(), this);
  }

  static load(id: string): MetricsPoolDay | null {
    return store.get("MetricsPoolDay", id) as MetricsPoolDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get volSPARTA(): BigDecimal {
    let value = this.get("volSPARTA");
    return value.toBigDecimal();
  }

  set volSPARTA(value: BigDecimal) {
    this.set("volSPARTA", Value.fromBigDecimal(value));
  }

  get volUSD(): BigDecimal {
    let value = this.get("volUSD");
    return value.toBigDecimal();
  }

  set volUSD(value: BigDecimal) {
    this.set("volUSD", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get incentives(): BigDecimal {
    let value = this.get("incentives");
    return value.toBigDecimal();
  }

  set incentives(value: BigDecimal) {
    this.set("incentives", Value.fromBigDecimal(value));
  }

  get incentivesUSD(): BigDecimal {
    let value = this.get("incentivesUSD");
    return value.toBigDecimal();
  }

  set incentivesUSD(value: BigDecimal) {
    this.set("incentivesUSD", Value.fromBigDecimal(value));
  }

  get incentives30Day(): BigDecimal {
    let value = this.get("incentives30Day");
    return value.toBigDecimal();
  }

  set incentives30Day(value: BigDecimal) {
    this.set("incentives30Day", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tvlSPARTA(): BigDecimal {
    let value = this.get("tvlSPARTA");
    return value.toBigDecimal();
  }

  set tvlSPARTA(value: BigDecimal) {
    this.set("tvlSPARTA", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get tokenPrice(): BigDecimal {
    let value = this.get("tokenPrice");
    return value.toBigDecimal();
  }

  set tokenPrice(value: BigDecimal) {
    this.set("tokenPrice", Value.fromBigDecimal(value));
  }
}
