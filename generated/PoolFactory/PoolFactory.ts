// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCuratePool extends ethereum.Event {
  get params(): AddCuratePool__Params {
    return new AddCuratePool__Params(this);
  }
}

export class AddCuratePool__Params {
  _event: AddCuratePool;

  constructor(event: AddCuratePool) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreatePool extends ethereum.Event {
  get params(): CreatePool__Params {
    return new CreatePool__Params(this);
  }
}

export class CreatePool__Params {
  _event: CreatePool;

  constructor(event: CreatePool) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveCuratePool extends ethereum.Event {
  get params(): RemoveCuratePool__Params {
    return new RemoveCuratePool__Params(this);
  }
}

export class RemoveCuratePool__Params {
  _event: RemoveCuratePool;

  constructor(event: RemoveCuratePool) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolFactory {
    return new PoolFactory("PoolFactory", address);
  }

  curatedPoolCount(): BigInt {
    let result = super.call(
      "curatedPoolCount",
      "curatedPoolCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_curatedPoolCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "curatedPoolCount",
      "curatedPoolCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(token: Address): Address {
    let result = super.call("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_getPool(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getPool", "getPool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolAssets(): Array<Address> {
    let result = super.call("getPoolAssets", "getPoolAssets():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getPoolAssets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPoolAssets",
      "getPoolAssets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTokenAssets(): Array<Address> {
    let result = super.call(
      "getTokenAssets",
      "getTokenAssets():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getTokenAssets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokenAssets",
      "getTokenAssets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getVaultAssets(): Array<Address> {
    let result = super.call(
      "getVaultAssets",
      "getVaultAssets():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getVaultAssets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getVaultAssets",
      "getVaultAssets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isCuratedPool(param0: Address): boolean {
    let result = super.call("isCuratedPool", "isCuratedPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isCuratedPool(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCuratedPool",
      "isCuratedPool(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPool(param0: Address): boolean {
    let result = super.call("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isPool(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _base(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wbnb(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCuratedPoolCall extends ethereum.Call {
  get inputs(): AddCuratedPoolCall__Inputs {
    return new AddCuratedPoolCall__Inputs(this);
  }

  get outputs(): AddCuratedPoolCall__Outputs {
    return new AddCuratedPoolCall__Outputs(this);
  }
}

export class AddCuratedPoolCall__Inputs {
  _call: AddCuratedPoolCall;

  constructor(call: AddCuratedPoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCuratedPoolCall__Outputs {
  _call: AddCuratedPoolCall;

  constructor(call: AddCuratedPoolCall) {
    this._call = call;
  }
}

export class CreatePoolADDCall extends ethereum.Call {
  get inputs(): CreatePoolADDCall__Inputs {
    return new CreatePoolADDCall__Inputs(this);
  }

  get outputs(): CreatePoolADDCall__Outputs {
    return new CreatePoolADDCall__Outputs(this);
  }
}

export class CreatePoolADDCall__Inputs {
  _call: CreatePoolADDCall;

  constructor(call: CreatePoolADDCall) {
    this._call = call;
  }

  get inputBase(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get inputToken(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreatePoolADDCall__Outputs {
  _call: CreatePoolADDCall;

  constructor(call: CreatePoolADDCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PurgeDeployerCall extends ethereum.Call {
  get inputs(): PurgeDeployerCall__Inputs {
    return new PurgeDeployerCall__Inputs(this);
  }

  get outputs(): PurgeDeployerCall__Outputs {
    return new PurgeDeployerCall__Outputs(this);
  }
}

export class PurgeDeployerCall__Inputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class PurgeDeployerCall__Outputs {
  _call: PurgeDeployerCall;

  constructor(call: PurgeDeployerCall) {
    this._call = call;
  }
}

export class RemoveCuratedPoolCall extends ethereum.Call {
  get inputs(): RemoveCuratedPoolCall__Inputs {
    return new RemoveCuratedPoolCall__Inputs(this);
  }

  get outputs(): RemoveCuratedPoolCall__Outputs {
    return new RemoveCuratedPoolCall__Outputs(this);
  }
}

export class RemoveCuratedPoolCall__Inputs {
  _call: RemoveCuratedPoolCall;

  constructor(call: RemoveCuratedPoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCuratedPoolCall__Outputs {
  _call: RemoveCuratedPoolCall;

  constructor(call: RemoveCuratedPoolCall) {
    this._call = call;
  }
}

export class SetParamsCall extends ethereum.Call {
  get inputs(): SetParamsCall__Inputs {
    return new SetParamsCall__Inputs(this);
  }

  get outputs(): SetParamsCall__Outputs {
    return new SetParamsCall__Outputs(this);
  }
}

export class SetParamsCall__Inputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }

  get newSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBASE(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetParamsCall__Outputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }
}
